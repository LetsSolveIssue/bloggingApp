{"ast":null,"code":"const baseURL = 'http://localhost:9000/api/v1';\nconst signInUserURL = `${baseURL}/usersignin`;\nconst createUserURL = `${baseURL}/usersignup`;\nconst createPostURL = `${baseURL}/post`;\nconst postsURl = `${baseURL}/getallpost`;\nconst deletePostURL = `${baseURL}/deletePost`;\n\nconst getToken = () => localStorage.getItem('token'); //Fetch api to signin\n\n\nconst signInUser = user => {\n  return fetch(signInUserURL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include',\n    body: JSON.stringify({\n      email: user.userEmail,\n      password: user.userPassword\n    })\n  }).then(res => res.json()).catch(e => console.log(e));\n}; //fetch api for signup\n\n\nconst createUser = user => {\n  return fetch(createUserURL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      fullName: user.fullName,\n      email: user.email,\n      password: user.password\n    })\n  }).then(res => res.json());\n}; //Fetch api to create post\n\n\nconst createPost = post => {\n  const token = getToken();\n  return fetch(createPostURL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      title: post.title,\n      description: post.description\n    })\n  }).then(res => res.json());\n}; //Api to get all post\n\n\nconst getPosts = () => {\n  return fetch(postsURl, {\n    method: 'GET',\n    headers: {\n      Authorization: `Bearer ${getToken()}`\n    }\n  }).then(res => res.json());\n}; //Api to delete post\n\n\nconst deletePost = id => fetch(`${deletePostURL}/${id}`, {\n  method: 'DELETE',\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${getToken()}`\n  }\n}).then(res => res.json());\n\nexport { signInUser, createUser, createPost, getPosts, deletePost };","map":{"version":3,"sources":["/Users/sugoilabs/Documents/assignments/storyFinal/blogPostBackend/client/src/utils/api.js"],"names":["baseURL","signInUserURL","createUserURL","createPostURL","postsURl","deletePostURL","getToken","localStorage","getItem","signInUser","user","fetch","method","headers","credentials","body","JSON","stringify","email","userEmail","password","userPassword","then","res","json","catch","e","console","log","createUser","fullName","createPost","post","token","Authorization","title","description","getPosts","deletePost","id"],"mappings":"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","sourcesContent":["\nconst baseURL = 'http://localhost:9000/api/v1'\n\n\nconst signInUserURL = `${baseURL}/usersignin`\nconst createUserURL = `${baseURL}/usersignup`\nconst createPostURL = `${baseURL}/post`\n\nconst postsURl = `${baseURL}/getallpost`\nconst deletePostURL = `${baseURL}/deletePost`\n\n\n\n\nconst getToken = () => localStorage.getItem('token')\n\n//Fetch api to signin\nconst signInUser = user => {\n\n    return fetch(signInUserURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        email: user.userEmail,\n        password: user.userPassword\n      })\n    }).then(res => res.json())\n      .catch(e => console.log(e))\n  }\n\n  //fetch api for signup\n\n  const createUser = user => {\n    return fetch(createUserURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fullName: user.fullName,\n        email: user.email,\n        password: user.password\n      })\n    }).then(res => res.json())\n  }\n\n\n  //Fetch api to create post\n  const createPost = post => {\n    const token = getToken()\n    return fetch(createPostURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        title: post.title,\n        description: post.description,\n      })\n    }).then(res => res.json())\n  }\n\n\n  //Api to get all post\n  const getPosts = () =>{\n   return  fetch(postsURl, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${getToken()}`\n      }\n    }).then(res => res.json())\n\n  }\n\n  //Api to delete post\n  const deletePost = id =>\n  fetch(`${deletePostURL}/${id}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${getToken()}`\n    }\n  }).then(res => res.json())\n  export {signInUser,createUser,createPost,getPosts,deletePost};"]},"metadata":{},"sourceType":"module"}